  name: Release

  on:
    push:
      branches: 
        - release/*

  jobs:
    release:
      name: Release
      if: startsWith(github.ref, 'refs/heads/release')
      runs-on: ubuntu-latest

      env:
        src-directory: ./src
  
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
  
        - name: Fetch all history for all tags and branches
          run: git fetch --prune --unshallow
 
        - name: Extract owner and repo
          uses: jungwinter/split@v1
          id: repo
          with:
            seperator: '/'
            msg: ${{ github.repository }}
  
        - name: Install GitVersion
          uses: gittools/actions/gitversion/setup@v0.9.4
          with:
            versionSpec: '5.x'
  
        - name: Use GitVersion
          id: gitversion # step id used as reference for output values
          uses: gittools/actions/gitversion/execute@v0.9.4
        - run: |
            echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
            echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"

        - name: Setup .NET Core
          uses: actions/setup-dotnet@v1
          with:
            dotnet-version: 3.1.403

        # dotnet restore
        - name: Install dependencies
          working-directory: ${{env.src-directory}}
          run: dotnet restore
        # dotnet build
        - name: Build
          working-directory: ${{env.src-directory}}
          run: dotnet build --configuration Release --no-restore
        # dotnet test
        - name: Test
          working-directory: ${{env.src-directory}}
          run: dotnet test --no-restore --verbosity normal
        # # dotnet pack nuget
        # - name: Pack
        #   working-directory: ${{env.src-directory}}
        #   run: dotnet pack -v normal -c Release --no-restore --include-symbols --include-source -p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }} oehen.arguard/oehen.arguard.csproj
        # upload artifact
        - name: Push to nuget.org
          run: dotnet nuget push ./src/oehen.arguard/bin/Release/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

        - name: Zip nuget packages
          run: zip -x './src/oehen.arguard/bin/Release/*.nupkg' -r nupkg.zip . 

        - name: Install GitReleaseManager
          uses: gittools/actions/gitreleasemanager/setup@v0.9.4
          with:
            versionSpec: '0.11.x'
  
        - name: Create release with GitReleaseManager
          uses: gittools/actions/gitreleasemanager/create@v0.9.4
          with:
            token: ${{ secrets.GITHUB_TOKEN }}
            owner: ${{ steps.repo.outputs._0 }}
            repository: ${{ steps.repo.outputs._1 }}
            milestone: ${{ steps.gitversion.outputs.majorMinorPatch }}
            name: 'Release ${{ steps.gitversion.outputs.majorMinorPatch }}'
            assets:  |
              nupkg.zip

        - name: publish release with gitreleasemanager
          uses: gittools/actions/gitreleasemanager/publish@v0.9.4
          with:
            token: ${{ secrets.github_token }}
            owner: ${{ steps.repo.outputs._0 }}
            repository: ${{ steps.repo.outputs._1 }}
            tagname: ${{ steps.gitversion.outputs.majorminorpatch }}
  
        # we dont want to publish and close the release automatically
        # - name: Close release with GitReleaseManager
        #   uses: gittools/actions/gitreleasemanager/close@v0.9.4
        #   with:
        #     token: ${{ secrets.GITHUB_TOKEN }}
        #     owner: ${{ steps.repo.outputs._0 }}
        #     repository: ${{ steps.repo.outputs._1 }}
        #     milestone: ${{ steps.gitversion.outputs.majorMinorPatch }}
  